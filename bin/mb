#!/usr/bin/env node
'use strict';

var mountebank = require('../src/mountebank'),
    fs = require('fs'),
    path = require('path'),
    http = require('http'),
    Q = require('q'),
    ejs = require('ejs'),
    yargs = require('yargs');

function error (message) {
    console.error(message + '\n');
    yargs.showHelp();
    process.exit(1);
}

function processExists (pid) {
    try {
        // "As a special case, signal 0 can be used to test existence of process"
        // https://nodejs.org/api/process.html#process_process_kill_pid_signal
        process.kill(pid, 0);
        return true;
    }
    catch (e) {
        return false;
    }
}

function shouldLoadConfigFile (options) {
    return typeof options.configfile !== 'undefined';
}

function putConfig (options, body) {
    var deferred = Q.defer(),
        requestOptions = {
            method: 'PUT',
            path: '/imposters',
            port: options.port,
            hostname: 'localhost',
            headers: {
                'Content-Type': 'application/json',
                Connection: 'close'
            }
        },
        request = http.request(requestOptions, function (response) {
            response.body = '';
            response.setEncoding('utf8');
            response.on('data', function (chunk) { response.body += chunk; });
            response.on('end', function () {
                response.body = JSON.parse(response.body);
                deferred.resolve(response);
            });
        });

    request.on('error', deferred.reject);

    request.write(body);
    request.end();
    return deferred.promise;
}

function getConfig (options) {
    var deferred = Q.defer(),
        requestOptions = {
            method: 'GET',
            path: '/imposters?replayable=true',
            port: options.port,
            hostname: 'localhost',
            headers: {
                'Content-Type': 'application/json',
                Connection: 'close'
            }
        },
        request;

    if (options.removeProxies) {
        requestOptions.path += '&removeProxies=true';
    }

    request = http.request(requestOptions, function (response) {
        response.body = '';
        response.setEncoding('utf8');
        response.on('data', function (chunk) { response.body += chunk; });
        response.on('end', function () {
            deferred.resolve(response);
        });
    });

    request.on('error', deferred.reject);

    request.end();
    return deferred.promise;
}

function stringify (filename, includeFile) {
    var resolvedPath = path.join(path.dirname(filename), includeFile),
        contents = fs.readFileSync(resolvedPath, 'utf8'),
        rendered = ejs.render(contents, {
            filename: filename,
            stringify: stringify,
            inject: stringify       // backwards compatibility
        }),
        jsonString = JSON.stringify(rendered);

    // get rid of the surrounding quotes because it makes the templates more natural to quote them there
    return jsonString.substring(1, jsonString.length - 1);
}

function getContentsOrExit (file, server) {
    try {
        return fs.readFileSync(file, 'utf8');
    }
    catch (e) {
        var message = 'No such file: ' + file;
        if (e.code !== 'ENOENT') {
            message = e;

        }

        server.close(function () { });
        console.error(message);
        process.exit(1);

        return '';
    }
}

function loadConfig (options, server) {
    if (!shouldLoadConfigFile(options)) {
        return Q(true);
    }

    var configContents = getContentsOrExit(options.configfile, server),
        parsedContents = options.noParse ? configContents : ejs.render(configContents, {
            filename: options.configfile,
            stringify: stringify,
            inject: stringify       // backwards compatibility
        }),
        json = JSON.parse(parsedContents),
        imposters = json.imposters;

    if (!imposters) {
        // Assume they left off the outer imposters array
        imposters = [json];
    }

    return putConfig(options, JSON.stringify({ imposters: imposters }));
}

function serverAt (options) {

    function start () {
        mountebank.create(options).then(function (server) {
            var shutdown = function shutdown () {
                server.close(function () {
                    try {
                        if (fs.existsSync(options.pidfile)) {
                            fs.unlinkSync(options.pidfile);
                        }
                    }
                    finally {
                        process.exit();
                    }
                });
            };

            process.on('SIGINT', shutdown);
            process.on('SIGTERM', shutdown);

            return loadConfig(options, server);
        }).then(function () {
            // Useful for build plugins that need to wait for mb to be fully initialized
            // They can wait for the pidfile to be written
            fs.writeFileSync(options.pidfile, process.pid.toString());
        }).done();
    }

    function stop () {
        if (!fs.existsSync(options.pidfile)) {
            return Q(true);
        }

        var pid = fs.readFileSync(options.pidfile);
        if (!processExists(pid)) {
            fs.unlinkSync(options.pidfile);
            return Q(true);
        }

        var deferred = Q.defer(),
            startTime = new Date(),
            timeout = 1000,
            waitForClose = function () {
                var elapsedTime = new Date() - startTime;

                if (!fs.existsSync(options.pidfile) || elapsedTime > timeout) {
                    deferred.resolve();
                }
                else {
                    setTimeout(waitForClose, 100);
                }
            };

        process.kill(pid);
        waitForClose();
        return deferred.promise;
    }

    function restart () {
        stop().then(start).done();
    }

    function save () {
        getConfig(options).then(function (response) {
            fs.writeFileSync(options.savefile, response.body);
        }).catch(function (err) {
            if (err.code === 'ECONNREFUSED') {
                console.error('No mb process running on port ' + options.port);
            }
            else {
                console.error(err);
            }
            process.exit(1);
        }).done();
    }

    return {
        start: start,
        stop: function () { stop().done(function () { process.exit(); }); },
        restart: restart,
        save: save
    };
}

yargs.usage('Usage: mb [command] [options...]');
yargs.command('start', 'Starts the server (default command)');
yargs.command('stop', 'Stops the server');
yargs.command('restart', 'Restarts the server, stopping any previously started server');
yargs.command('save', 'Saves current imposter configuration to a config file');

yargs.options({
    port: {
        default: 2525,
        description: 'the port to run the mountebank server on',
        nargs: 1,
        type: 'number',
        global: true
    },
    configfile: {
        description: 'file to load imposters from, can be an EJS template',
        nargs: 1,
        type: 'string',
        global: true
    },
    noParse: {
        description: 'prevent rendering the configfile as an EJS template',
        type: 'boolean',
        global: true
    },
    pidfile: {
        default: 'mb.pid',
        description: 'where the pid is stored for the stop command',
        nargs: 1,
        type: 'string',
        global: true
    },
    nologfile: {
        description: 'prevent logging to the filesystem',
        type: 'boolean',
        global: true
    },
    logfile: {
        default: 'mb.log',
        description: 'file used for all log',
        nargs: 1,
        type: 'string',
        global: true
    },
    loglevel: {
        default: 'info',
        description: 'level for terminal logs',
        nargs: 1,
        type: 'string',
        choices: ['debug', 'info', 'warn', 'error'],
        global: true
    },
    allowInjection: {
        description: 'set to allow JavaScript injection',
        type: 'boolean',
        global: true
    },
    localOnly: {
        default: false,
        description: 'allow connections only from localhost',
        type: 'boolean',
        global: true
    },
    ipWhitelist: {
        default: '*',
        description: 'pipe-delimited list of allowed IP address patterns to connect to the mountebank admin port',
        type: 'string',
        global: true
    },
    mock: {
        description: 'remember requests for mock verification',
        type: 'boolean',
        global: true
    },
    debug: {
        description: 'include stub match information in imposter retrievals for debugging purposes',
        type: 'boolean',
        global: true
    },
    savefile: {
        default: 'mb.json',
        description: 'file to save imposters to',
        nargs: 1,
        type: 'string',
        global: true
    },
    removeProxies: {
        description: 'removes proxies from the configuration when using the save command',
        type: 'boolean',
        global: true
    },
    heroku: {
        type: 'boolean',
        global: true
    }
});

yargs.version();
yargs.help();
yargs.epilog('For more information, see http://www.mbtest.org/docs/commandLine');

try {
    var argv = yargs.argv,
        command = argv._.length === 0 ? 'start' : argv._[0],
        server = serverAt(argv);

    // Avoid noise in logs
    delete argv._;
    delete argv.$0;

    argv.ipWhitelist = argv.ipWhitelist.split('|');

    switch (command) {
        case 'start':
            server.start();
            break;
        case 'stop':
            server.stop();
            break;
        case 'restart':
            server.restart();
            break;
        case 'save':
            server.save();
            break;
        case 'help':
            yargs.showHelp();
            break;
        default:
            error("Invalid command '" + command + "'.");
            break;
    }
}
catch (err) {
    error(err.message);
}
